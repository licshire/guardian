// Code generated by counterfeiter. DO NOT EDIT.
package runcontainerdfakes

import (
	"io"
	"sync"

	"code.cloudfoundry.org/guardian/rundmc/runcontainerd"
	"code.cloudfoundry.org/lager"
	specs "github.com/opencontainers/runtime-spec/specs-go"
)

type FakeContainerManager struct {
	CreateStub        func(log lager.Logger, containerID string, spec *specs.Spec) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		log         lager.Logger
		containerID string
		spec        *specs.Spec
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(log lager.Logger, containerID string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		log         lager.Logger
		containerID string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	ExecStub        func(log lager.Logger, containerID, processID string, spec *specs.Process, processIO func() (io.Reader, io.Writer, io.Writer)) error
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		log         lager.Logger
		containerID string
		processID   string
		spec        *specs.Process
		processIO   func() (io.Reader, io.Writer, io.Writer)
	}
	execReturns struct {
		result1 error
	}
	execReturnsOnCall map[int]struct {
		result1 error
	}
	StateStub        func(log lager.Logger, containerID string) (int, string, error)
	stateMutex       sync.RWMutex
	stateArgsForCall []struct {
		log         lager.Logger
		containerID string
	}
	stateReturns struct {
		result1 int
		result2 string
		result3 error
	}
	stateReturnsOnCall map[int]struct {
		result1 int
		result2 string
		result3 error
	}
	GetContainerPIDStub        func(log lager.Logger, containerID string) (uint32, error)
	getContainerPIDMutex       sync.RWMutex
	getContainerPIDArgsForCall []struct {
		log         lager.Logger
		containerID string
	}
	getContainerPIDReturns struct {
		result1 uint32
		result2 error
	}
	getContainerPIDReturnsOnCall map[int]struct {
		result1 uint32
		result2 error
	}
	GetNamespaceStub        func() (string, error)
	getNamespaceMutex       sync.RWMutex
	getNamespaceArgsForCall []struct{}
	getNamespaceReturns     struct {
		result1 string
		result2 error
	}
	getNamespaceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeContainerManager) Create(log lager.Logger, containerID string, spec *specs.Spec) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		log         lager.Logger
		containerID string
		spec        *specs.Spec
	}{log, containerID, spec})
	fake.recordInvocation("Create", []interface{}{log, containerID, spec})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(log, containerID, spec)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeContainerManager) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeContainerManager) CreateArgsForCall(i int) (lager.Logger, string, *specs.Spec) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].log, fake.createArgsForCall[i].containerID, fake.createArgsForCall[i].spec
}

func (fake *FakeContainerManager) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) Delete(log lager.Logger, containerID string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		log         lager.Logger
		containerID string
	}{log, containerID})
	fake.recordInvocation("Delete", []interface{}{log, containerID})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(log, containerID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeContainerManager) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeContainerManager) DeleteArgsForCall(i int) (lager.Logger, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].log, fake.deleteArgsForCall[i].containerID
}

func (fake *FakeContainerManager) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) Exec(log lager.Logger, containerID string, processID string, spec *specs.Process, processIO func() (io.Reader, io.Writer, io.Writer)) error {
	fake.execMutex.Lock()
	ret, specificReturn := fake.execReturnsOnCall[len(fake.execArgsForCall)]
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		log         lager.Logger
		containerID string
		processID   string
		spec        *specs.Process
		processIO   func() (io.Reader, io.Writer, io.Writer)
	}{log, containerID, processID, spec, processIO})
	fake.recordInvocation("Exec", []interface{}{log, containerID, processID, spec, processIO})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(log, containerID, processID, spec, processIO)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.execReturns.result1
}

func (fake *FakeContainerManager) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeContainerManager) ExecArgsForCall(i int) (lager.Logger, string, string, *specs.Process, func() (io.Reader, io.Writer, io.Writer)) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].log, fake.execArgsForCall[i].containerID, fake.execArgsForCall[i].processID, fake.execArgsForCall[i].spec, fake.execArgsForCall[i].processIO
}

func (fake *FakeContainerManager) ExecReturns(result1 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) ExecReturnsOnCall(i int, result1 error) {
	fake.ExecStub = nil
	if fake.execReturnsOnCall == nil {
		fake.execReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.execReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeContainerManager) State(log lager.Logger, containerID string) (int, string, error) {
	fake.stateMutex.Lock()
	ret, specificReturn := fake.stateReturnsOnCall[len(fake.stateArgsForCall)]
	fake.stateArgsForCall = append(fake.stateArgsForCall, struct {
		log         lager.Logger
		containerID string
	}{log, containerID})
	fake.recordInvocation("State", []interface{}{log, containerID})
	fake.stateMutex.Unlock()
	if fake.StateStub != nil {
		return fake.StateStub(log, containerID)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.stateReturns.result1, fake.stateReturns.result2, fake.stateReturns.result3
}

func (fake *FakeContainerManager) StateCallCount() int {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return len(fake.stateArgsForCall)
}

func (fake *FakeContainerManager) StateArgsForCall(i int) (lager.Logger, string) {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return fake.stateArgsForCall[i].log, fake.stateArgsForCall[i].containerID
}

func (fake *FakeContainerManager) StateReturns(result1 int, result2 string, result3 error) {
	fake.StateStub = nil
	fake.stateReturns = struct {
		result1 int
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerManager) StateReturnsOnCall(i int, result1 int, result2 string, result3 error) {
	fake.StateStub = nil
	if fake.stateReturnsOnCall == nil {
		fake.stateReturnsOnCall = make(map[int]struct {
			result1 int
			result2 string
			result3 error
		})
	}
	fake.stateReturnsOnCall[i] = struct {
		result1 int
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeContainerManager) GetContainerPID(log lager.Logger, containerID string) (uint32, error) {
	fake.getContainerPIDMutex.Lock()
	ret, specificReturn := fake.getContainerPIDReturnsOnCall[len(fake.getContainerPIDArgsForCall)]
	fake.getContainerPIDArgsForCall = append(fake.getContainerPIDArgsForCall, struct {
		log         lager.Logger
		containerID string
	}{log, containerID})
	fake.recordInvocation("GetContainerPID", []interface{}{log, containerID})
	fake.getContainerPIDMutex.Unlock()
	if fake.GetContainerPIDStub != nil {
		return fake.GetContainerPIDStub(log, containerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getContainerPIDReturns.result1, fake.getContainerPIDReturns.result2
}

func (fake *FakeContainerManager) GetContainerPIDCallCount() int {
	fake.getContainerPIDMutex.RLock()
	defer fake.getContainerPIDMutex.RUnlock()
	return len(fake.getContainerPIDArgsForCall)
}

func (fake *FakeContainerManager) GetContainerPIDArgsForCall(i int) (lager.Logger, string) {
	fake.getContainerPIDMutex.RLock()
	defer fake.getContainerPIDMutex.RUnlock()
	return fake.getContainerPIDArgsForCall[i].log, fake.getContainerPIDArgsForCall[i].containerID
}

func (fake *FakeContainerManager) GetContainerPIDReturns(result1 uint32, result2 error) {
	fake.GetContainerPIDStub = nil
	fake.getContainerPIDReturns = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerManager) GetContainerPIDReturnsOnCall(i int, result1 uint32, result2 error) {
	fake.GetContainerPIDStub = nil
	if fake.getContainerPIDReturnsOnCall == nil {
		fake.getContainerPIDReturnsOnCall = make(map[int]struct {
			result1 uint32
			result2 error
		})
	}
	fake.getContainerPIDReturnsOnCall[i] = struct {
		result1 uint32
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerManager) GetNamespace() (string, error) {
	fake.getNamespaceMutex.Lock()
	ret, specificReturn := fake.getNamespaceReturnsOnCall[len(fake.getNamespaceArgsForCall)]
	fake.getNamespaceArgsForCall = append(fake.getNamespaceArgsForCall, struct{}{})
	fake.recordInvocation("GetNamespace", []interface{}{})
	fake.getNamespaceMutex.Unlock()
	if fake.GetNamespaceStub != nil {
		return fake.GetNamespaceStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getNamespaceReturns.result1, fake.getNamespaceReturns.result2
}

func (fake *FakeContainerManager) GetNamespaceCallCount() int {
	fake.getNamespaceMutex.RLock()
	defer fake.getNamespaceMutex.RUnlock()
	return len(fake.getNamespaceArgsForCall)
}

func (fake *FakeContainerManager) GetNamespaceReturns(result1 string, result2 error) {
	fake.GetNamespaceStub = nil
	fake.getNamespaceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerManager) GetNamespaceReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetNamespaceStub = nil
	if fake.getNamespaceReturnsOnCall == nil {
		fake.getNamespaceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getNamespaceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	fake.getContainerPIDMutex.RLock()
	defer fake.getContainerPIDMutex.RUnlock()
	fake.getNamespaceMutex.RLock()
	defer fake.getNamespaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeContainerManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runcontainerd.ContainerManager = new(FakeContainerManager)
